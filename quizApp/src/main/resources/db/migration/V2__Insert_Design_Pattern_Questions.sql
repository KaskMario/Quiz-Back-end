INSERT INTO Question (question_title, option1, option2, option3, option4, right_answer, difficulty_level, category, approved) VALUES
('Which design pattern provides a way to create objects while hiding the creation logic?', 'Singleton', 'Factory Method', 'Adapter', 'Observer', 'Factory Method', 'Easy', 'Design Patterns', true),
('What is the main purpose of the Singleton pattern?', 'To limit the instantiation of a class to one object', 'To create multiple objects', 'To define an interface for creating objects', 'To notify other objects of changes', 'To limit the instantiation of a class to one object', 'Easy', 'Design Patterns', true),
('Which design pattern allows an object to alter its behavior when its internal state changes?', 'Strategy', 'State', 'Observer', 'Decorator', 'State', 'Medium', 'Design Patterns', true),
('Which pattern is used to separate the construction of a complex object from its representation?', 'Builder', 'Factory Method', 'Prototype', 'Abstract Factory', 'Builder', 'Medium', 'Design Patterns', true),
('Which design pattern ensures that a class has only one instance and provides a global point of access to it?', 'Builder', 'Singleton', 'Prototype', 'Adapter', 'Singleton', 'Easy', 'Design Patterns', true),
('Which pattern defines a family of algorithms and makes them interchangeable?', 'Strategy', 'Observer', 'Decorator', 'Adapter', 'Strategy', 'Medium', 'Design Patterns', true),
('Which pattern is used to match interfaces of different classes?', 'Adapter', 'Bridge', 'Decorator', 'Composite', 'Adapter', 'Easy', 'Design Patterns', true),
('What is the main advantage of the Composite pattern?', 'To compose objects into tree structures', 'To adapt one interface to another', 'To attach additional responsibilities to an object', 'To allow multiple objects to communicate', 'To compose objects into tree structures', 'Medium', 'Design Patterns', true),
('Which pattern allows an object to change its behavior depending on its state?', 'State', 'Strategy', 'Command', 'Facade', 'State', 'Medium', 'Design Patterns', true),
('Which pattern provides a surrogate or placeholder for another object to control access to it?', 'Proxy', 'Adapter', 'Decorator', 'Singleton', 'Proxy', 'Medium', 'Design Patterns', true),
('Which pattern decouples an abstraction from its implementation?', 'Bridge', 'Adapter', 'Strategy', 'Facade', 'Bridge', 'Medium', 'Design Patterns', true),
('Which pattern is responsible for creating an instance of several derived classes?', 'Factory Method', 'Abstract Factory', 'Prototype', 'Builder', 'Abstract Factory', 'Hard', 'Design Patterns', true),
('Which pattern allows an object to notify other objects of changes in its state?', 'Observer', 'Mediator', 'Decorator', 'Facade', 'Observer', 'Medium', 'Design Patterns', true),
('Which pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes?', 'Abstract Factory', 'Builder', 'Factory Method', 'Prototype', 'Abstract Factory', 'Hard', 'Design Patterns', true),
('Which design pattern allows you to build a complex object step by step?', 'Builder', 'Prototype', 'Singleton', 'Factory Method', 'Builder', 'Medium', 'Design Patterns', true),
('Which pattern allows you to treat individual objects and compositions of objects uniformly?', 'Composite', 'Flyweight', 'Adapter', 'Decorator', 'Composite', 'Medium', 'Design Patterns', true),
('Which pattern adds responsibilities to an object dynamically?', 'Decorator', 'Adapter', 'Composite', 'Facade', 'Decorator', 'Medium', 'Design Patterns', true),
('Which design pattern provides a unified interface to a set of interfaces in a subsystem?', 'Facade', 'Adapter', 'Proxy', 'Observer', 'Facade', 'Easy', 'Design Patterns', true),
('Which pattern allows you to share objects to support large numbers of fine-grained objects efficiently?', 'Flyweight', 'Prototype', 'Decorator', 'Composite', 'Flyweight', 'Hard', 'Design Patterns', true),
('Which pattern encapsulates a request as an object, thereby allowing parameterization of clients with different requests?', 'Command', 'Strategy', 'State', 'Memento', 'Command', 'Medium', 'Design Patterns', true),
('Which pattern is used when you want to provide a simplified interface to a complex subsystem?', 'Facade', 'Bridge', 'Adapter', 'Proxy', 'Facade', 'Easy', 'Design Patterns', true),
('Which pattern allows the definition of a skeleton of an algorithm, deferring some steps to subclasses?', 'Template Method', 'Strategy', 'State', 'Observer', 'Template Method', 'Medium', 'Design Patterns', true),
('Which pattern provides an object to represent another object?', 'Proxy', 'Adapter', 'Decorator', 'Facade', 'Proxy', 'Medium', 'Design Patterns', true),
('Which pattern allows objects to communicate with each other without knowing each other\'s identity?', 'Mediator', 'Observer', 'Chain of Responsibility', 'Proxy', 'Mediator', 'Medium', 'Design Patterns', true),
('Which pattern is used to undo or rollback an object to a previous state?', 'Memento', 'Command', 'State', 'Visitor', 'Memento', 'Hard', 'Design Patterns', true),
('Which pattern defines an interface for creating an object, but lets subclasses alter the type of objects that will be created?', 'Factory Method', 'Builder', 'Abstract Factory', 'Prototype', 'Factory Method', 'Hard', 'Design Patterns', true),
('Which pattern allows an object to pass a request along a chain of potential handlers?', 'Chain of Responsibility', 'Observer', 'Mediator', 'Visitor', 'Chain of Responsibility', 'Medium', 'Design Patterns', true),
('Which pattern represents an operation to be performed on the elements of an object structure?', 'Visitor', 'Command', 'Memento', 'Strategy', 'Visitor', 'Hard', 'Design Patterns', true),
('Which pattern defines a one-to-many dependency between objects?', 'Observer', 'Mediator', 'Chain of Responsibility', 'Decorator', 'Observer', 'Easy', 'Design Patterns', true),
('Which pattern allows an object to access its parent object?', 'Chain of Responsibility', 'Decorator', 'Composite', 'Mediator', 'Composite', 'Hard', 'Design Patterns', true),
('Which pattern provides a way to access the elements of an aggregate object sequentially?', 'Iterator', 'Visitor', 'Strategy', 'Chain of Responsibility', 'Iterator', 'Easy', 'Design Patterns', true),
('Which pattern creates a duplicate object while keeping performance in mind?', 'Prototype', 'Factory Method', 'Abstract Factory', 'Builder', 'Prototype', 'Medium', 'Design Patterns', true),
('Which pattern is used to create an object without exposing the creation logic to the client?', 'Factory Method', 'Builder', 'Prototype', 'Singleton', 'Factory Method', 'Easy', 'Design Patterns', true),
('Which pattern is useful for designing scalable user interfaces?', 'Composite', 'Adapter', 'Facade', 'Mediator', 'Composite', 'Medium', 'Design Patterns', true),
('Which pattern hides the complexities of a system and provides an interface to the client to use?', 'Facade', 'Proxy', 'Decorator', 'Adapter', 'Facade', 'Easy', 'Design Patterns', true),
('Which pattern provides a way to handle software updates without modifying existing code?', 'Decorator', 'Visitor', 'Observer', 'Chain of Responsibility', 'Decorator', 'Medium', 'Design Patterns', true),
('Which pattern is responsible for directing communication between objects?', 'Mediator', 'Observer', 'Chain of Responsibility', 'Proxy', 'Mediator', 'Medium', 'Design Patterns', true),
('Which pattern converts the interface of a class into another interface that a client expects?', 'Adapter', 'Facade', 'Bridge', 'Proxy', 'Adapter', 'Easy', 'Design Patterns', true),
('Which pattern uses a single instance of a class and provides a global point of access to it?', 'Singleton', 'Factory Method', 'Builder', 'Prototype', 'Singleton', 'Easy', 'Design Patterns', true),
('Which pattern allows the creation of a family of related objects without specifying their concrete class?', 'Abstract Factory', 'Builder', 'Prototype', 'Factory Method', 'Abstract Factory', 'Hard', 'Design Patterns', true),
('Which pattern allows defining a placeholder for another object to control access to it?', 'Proxy', 'Adapter', 'Facade', 'Composite', 'Proxy', 'Medium', 'Design Patterns', true),
('Which pattern is ideal for adding features to an object dynamically?', 'Decorator', 'Adapter', 'Composite', 'Facade', 'Decorator', 'Medium', 'Design Patterns', true),
('Which pattern allows objects to change their behavior based on the current state?', 'State', 'Strategy', 'Command', 'Observer', 'State', 'Medium', 'Design Patterns', true),
('Which pattern defines a family of algorithms and makes them interchangeable?', 'Strategy', 'State', 'Observer', 'Command', 'Strategy', 'Medium', 'Design Patterns', true),
('Which pattern ensures a class has only one instance?', 'Singleton', 'Factory Method', 'Builder', 'Prototype', 'Singleton', 'Easy', 'Design Patterns', true),
('Which pattern provides a way to define a skeleton of an algorithm?', 'Template Method', 'Strategy', 'Observer', 'State', 'Template Method', 'Medium', 'Design Patterns', true),
('Which pattern is used to reduce the cost of creating a large number of similar objects?', 'Flyweight', 'Prototype', 'Factory Method', 'Builder', 'Flyweight', 'Hard', 'Design Patterns', true),
('Which pattern allows you to create a complex object step by step?', 'Builder', 'Prototype', 'Singleton', 'Factory Method', 'Builder', 'Medium', 'Design Patterns', true);
